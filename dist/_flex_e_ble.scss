// Must be added to html tag either manaully or feature detect eg modernizr
$default-text-align: left !default;

$starting-columns: 1 !default;
$total-columns: 12 !default;

$column-gutter: 15px !default;
$auto-column-gutters: false !default;
$grid-padding-name: 'pad' !default;
$independant-grid-name: '' !default;

// Use to namespace the whole grid-system. eg 'wtf-' or 'cool-'
$global-name-space: '' !default;
$container-name: 'container' !default; // Could be wrapper
$grid-name: 'grid-' !default; // Could be col or column
$base-grid-name: '' !default; // Does your base grid have a sufix.
$row-name: 'row' !default; // Could be flex
$disable-push-pull-classes: false !default;
$right-name: 'right' !default; // Could be push
$left-name: 'left' !default; // Could be push

// Set to true to always set column index after grid name eg. grid-1-md instead of grid-md-1
$column-index-always-before-size: false !default;

// Loop over these breakpoints and pass keys into grid classes
$breakpoints: (
  'small': 480px,
  'medium': 768px,
  'large': 1024px,
  'xlarge': 1180px
) !default;

$break-dir: '>=' !default;

$smallest-size: nth(map-values($breakpoints), 1);
$last-breakpoint: nth(map-values($breakpoints), length($breakpoints));

$container-breakpoint: $last-breakpoint !default;
$column-gutter-breakpoint: $smallest-size !default;

$enable-extra-grid: false !default;
$extra-grid-name: 'fifth' !default;
$extra-columns: 5 !default;

$grid-framework: '' !default;

@if $grid-framework == 'bootstrap' {
  $grid-name: 'col-';
  $base-grid-name: 'xs';
  $column-gutter: 15px;
  $auto-column-gutters: true;
  $right-name: 'push';
  $left-name: 'pull';
  $breakpoints: (
    'sm': 480px,
    'md': 768px,
    'lg': 1024px,
    'xl': 1180px
  );

}

@if $grid-framework == 'foundation' {
  $column-gutter: 0.9375rem;
  $auto-column-gutters: false;
  $independant-grid-name: 'column';
  $grid-name: '';
  $base-grid-name: 'small';
  $breakpoints: (
    'medium': 768px,
    'large': 1024px
  );
}

@function grid-size($n) {
  @return percentage($n / $total-columns);
}

@function grid-size-special($n) {
  @return percentage($n / $extra-columns);
}

@function has-dash($string) {
  $has-dash: $string + ''; // allow numbers
  @if $has-dash == '' { @return true; } // return itself if blank
  @return str-index($has-dash, '-') != null;
}

// check for dash else add one
@function dashize($string, $position: 'end') {
  $dashized: $string;

  @if has-dash($string) { @return $dashized; }
  @if ($position == 'start') {
    @return '-' + $dashized;
  }
  @return $dashized + '-';
}

@function master-grid-name() {
  $master-grid-name: $grid-name;

  // replace $grid-name with $independant-grid-name if available
  @if $independant-grid-name != '' { $master-grid-name: $independant-grid-name; }

  @return $global-name-space + $master-grid-name;
}

@function base-grid() {
  @return $global-name-space + dashize($grid-name);
}

@function grid-name-order($size-name, $increment) {
  @if ($column-index-always-before-size) {
    @return $increment + dashize($size-name, 'start');
  } @else {
    @return dashize($size-name) + $increment;
  }
}

@function offset-name-order($offset-name, $size-name, $increment) {
  @if ($column-index-always-before-size) {
    @return $increment + dashize($offset-name, 'start') + dashize($size-name, 'start');
  } @else {
    @return dashize($size-name) + $offset-name + '-' + $increment;
  }
}

@function grid-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + grid-name-order($size-name, $increment);
}

@function offset-right-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + offset-name-order($right-name, $size-name, $increment);
}

@function offset-left-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + offset-name-order($left-name, $size-name, $increment);
}

@mixin build-row($display: flex) {
  display: $display;
  position: relative;
  @if ($display == 'flex') {
    flex-flow: row wrap;
  }
}

@mixin build-grid {
  display: inline-block;
  position: relative;
  text-align: $default-text-align;
  vertical-align: top;
}

@mixin build-column-gutter {

  padding-right: ($column-gutter / 2);
  padding-left: ($column-gutter / 2);


  @include media('#{$break-dir + $column-gutter-breakpoint}') {
    padding-right: ($column-gutter);
    padding-left: ($column-gutter);
  }
}

@mixin build-container {
  margin-right: auto;
  margin-left: auto;

  @include media('#{$break-dir + $container-breakpoint}') {
    max-width: $container-breakpoint;
  }
}

.#{$global-name-space + $container-name} {
  @include build-container;
}

.#{$global-name-space + $row-name} {
  @include build-row;
}

.#{$global-name-space + $grid-padding-name} {
  @include build-column-gutter;
}

[class*='#{master-grid-name()}'] {
  @include build-grid;

  @if $auto-column-gutters {
    @include build-column-gutter;
  }

  &.row {
    @include build-row($display: inline-block);
  }
}


@for $i from $starting-columns through $total-columns {
  $local-size: grid-size($i);

  // Base grid
  .#{grid-name($i)} {
    width: $local-size;
  }

  @if not $disable-push-pull-classes {
    // Offset right
    .#{offset-right-name($i)} {
      right: auto;
      left: $local-size;
    }

    // Offset left
    .#{offset-left-name($i)} {
      right: $local-size;
      left: auto;
    }
  }
}

@each $size, $breakpoint in $breakpoints {
  @include media('#{$break-dir + $breakpoint}') {
    @for $i from $starting-columns through $total-columns {
      $local-size: grid-size($i);

      // Responsive Grid
      .#{grid-name($i, $size)} {
        width: $local-size;
      }

      @if not $disable-push-pull-classes {
        // Responsive offset right
        .#{offset-right-name($i, $size)} {
          right: auto;
          left: $local-size;
        }

        // Responsive offset left
        .#{offset-left-name($i, $size) } {
          right: $local-size;
          left: auto;
        }
      }
    }
  }
}


@if $enable-extra-grid {
  @for $i from $starting-columns through $extra-columns {
    .#{$global-name-space + $extra-grid-name + $i} {
      width: grid-size-special($i);
    }
  }


  @each $size, $breakpoint in $breakpoints {
    @include media('#{$break-dir + $breakpoint}') {
      @for $i from $starting-columns through $extra-columns {
        .#{$global-name-space + $extra-grid-name + $size + '-' + $i} {
          width: grid-size-special($i);
        }
      }
    }
  }
}

.#{master-grid-name()} {
  &grow {
    flex-grow: 1 !important;
  }

  &top {
    align-self: flex-start !important;
  }

  &middle {
    align-self: center !important;
  }

  &bottom {
    align-self: flex-end !important;
  }

  &base {
    align-self: baseline !important;
  }

  &stretch {
    align-self: stretch !important;
  }
}

.#{$global-name-space + $row-name} {

  &-column {
    flex-flow: column wrap !important;
  }

  &-reverse {
    direction: rtl !important;
  }

  &-right {
    justify-content: flex-end !important;
  }

  &-center {
    justify-content: center !important;
  }

  &-left {
    justify-content: flex-start !important;
  }

  &-top {
    align-items: flex-start !important;
  }

  &-middle {
    align-items: center !important;
  }

  &-bottom {
    align-items: flex-end !important;
  }

  &-base {
    align-items: baseline !important;
  }

  &-stretch {
    align-items: stretch !important;
  }

  &-between {
    justify-content: space-between !important;
  }

  &-around {
    justify-content: space-around !important;
  }

}
