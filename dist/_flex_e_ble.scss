// Must be added to html tag either manaully or feature detect eg modernizr
$flexbox-enable-class: 'flexbox' !default;
$flexbox-compatibility-enabled: true !default;
$special-font-stack: Helvetica, Arial, sans-serif !default;
$default-text-align: left !default;

$starting-columns: 1 !default;
$total-columns: 12 !default;

$column-gutter: 15px !default;
$auto-column-gutters: false !default;
$grid-padding-name: 'pad' !default;
$independant-grid-name: '' !default;

// Use to namespace the whole grid-system. eg 'wtf-' or 'cool-'
$global-name-space: '' !default;
$container-name: 'container' !default; // Could be wrapper
$grid-name: 'grid-' !default; // Could be col or column
$base-grid-name: '' !default; // Does your base grid have a sufix.
$row-name: 'row' !default; // Could be flex
$right-name: 'right' !default; // Could be push
$left-name: 'left' !default; // Could be push

// Loop over these breakpoints and pass keys into grid classes
$breakpoints: (
  'small': 480px,
  'medium': 768px,
  'large': 1024px,
  'xlarge': 1180px
) !default;

$break-dir: '>=' !default;

$enable-extra-grid: false !default;
$extra-grid-name: 'fifth' !default;
$extra-columns: 5 !default;

$grid-framework: '' !default;

@if $grid-framework == 'bootstrap' {
  $grid-name: 'col-';
  $base-grid-name: 'xs';
  $column-gutter: 15px;
  $auto-column-gutters: true;
  $right-name: 'push';
  $left-name: 'pull';
  $breakpoints: (
    'sm': 480px,
    'md': 768px,
    'lg': 1024px,
    'xl': 1180px
  );

}

@if $grid-framework == 'foundation' {
  $column-gutter: 0.9375rem;
  $auto-column-gutters: false;
  $independant-grid-name: 'column';
  $grid-name: '';
  $base-grid-name: 'small';
  $breakpoints: (
    'medium': 768px,
    'large': 1024px
  );
}

@function grid-size($n) {
  @return percentage($n / $total-columns);
}

@function grid-size-special($n) {
  @return percentage($n / $extra-columns);
}

@function has-dash($string) {
  @if $string == '' { @return true; } // return itself if blank
  @return str-index($string, '-') != null;
}

// check for dash else add one
@function dashize($string) {
  $dashized: $string;

  @if has-dash($string) { @return $dashized; }
  @return $dashized + '-';
}

@function master-grid-name() {
  $master-grid-name: $grid-name;

  // replace $grid-name with $independant-grid-name if available
  @if $independant-grid-name != '' { $master-grid-name: $independant-grid-name; }

  @return $global-name-space + $master-grid-name;
}

@function base-grid() {
  // @debug dashize($grid-name);
  @return $global-name-space + dashize($grid-name);
}

@function grid-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + dashize($size-name) + $increment;
}

@function offset-right-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + dashize($size-name) + $right-name + '-' + $increment;
}

@function offset-left-name($increment, $size-name: $base-grid-name) {
  @return base-grid() + dashize($size-name) + $left-name + '-' + $increment;
}

@mixin build-row($display: block) {

  @include disable-if-flexbox-pure {
    display: $display;
  }

  @include flexbox-enabled-class {
    display: flex;
    flex-flow: row wrap;
  }

  position: relative;
  letter-spacing: -0.31em; // Webkit: collapse white-space between units
  text-rendering: optimizespeed; // Webkit: fixes text-rendering: optimizeLegibility
  box-sizing: border-box;
}

@mixin build-grid {
  display: inline-block;
  position: relative;

  font-family: $special-font-stack;
  letter-spacing: normal;
  text-align: $default-text-align;
  text-rendering: auto;

  box-sizing: border-box;
}

$smallest-size: nth(nth($breakpoints, 1), 1);

@mixin build-column-gutter {

  padding-right: ($column-gutter / 2);
  padding-left: ($column-gutter / 2);


  @include media('screen', '>=#{$smallest-size}') {
    padding-right: ($column-gutter);
    padding-left: ($column-gutter);
  }
}


@mixin disable-if-flexbox-pure {
  @if $flexbox-compatibility-enabled {
    @content;
  }
}

@mixin flexbox-enabled-class {
  @if $flexbox-enable-class != '' {
    .#{$flexbox-enable-class} & {
      @content;
    }
  } @else {
    @content;
  }
}

html {
  font-family: $special-font-stack;
}

.#{$global-name-space + $container-name} {
  margin-right: auto;
  margin-left: auto;

  $last-breakpoint: nth(map-values($breakpoints), length($breakpoints));
  @include media('screen', '#{$break-dir + $last-breakpoint}') {
    max-width: $last-breakpoint;
  }
}

.#{$global-name-space + $row-name} {
  @include build-row;

  @include disable-if-flexbox-pure {
    width: 100%;
  }

  @include flexbox-enabled-class {
    // clearfix breaks flexgrid row
    &.clearfix {
      &:before,
      &:after {
        content: initial;
      }
    }
  }
}

.#{$global-name-space + $grid-padding-name} {
  @include build-column-gutter;
}

[class*='#{master-grid-name()}'] {
  @include build-grid;

  @if $auto-column-gutters {
    @include build-column-gutter;
  }

  &.row {
    @include build-row($display: inline-block);
  }
}


@for $i from $starting-columns through $total-columns {
  $local-size: grid-size($i);

  // Base grid
  .#{grid-name($i)} {
    width: $local-size;
  }

  // Offset right
  .#{offset-right-name($i)} {
    right: auto;
    left: $local-size;
  }

  // Offset left
  .#{offset-left-name($i)} {
    right: $local-size;
    left: auto;
  }
}

@each $size, $breakpoint in $breakpoints {
  @include media('screen', '#{$break-dir + $breakpoint}') {
    @for $i from $starting-columns through $total-columns {
      $local-size: grid-size($i);

      // Responsive Grid
      .#{grid-name($i, $size)} {
        width: $local-size;
      }

      // Responsive offset right
      .#{offset-right-name($i, $size)} {
        right: auto;
        left: $local-size;
      }

      // Responsive offset left
      .#{offset-left-name($i, $size) } {
        right: $local-size;
        left: auto;
      }
    }
  }
}


@if $enable-extra-grid {
  @for $i from $starting-columns through $extra-columns {
    .#{$global-name-space + $extra-grid-name + $i} {
      width: grid-size-special($i);
    }
  }


  @each $size, $breakpoint in $breakpoints {
    @include media('screen', '#{$break-dir + $breakpoint}') {
      @for $i from $starting-columns through $extra-columns {
        .#{$global-name-space + $extra-grid-name + $size + '-' + $i} {
          width: grid-size-special($i);
        }
      }
    }
  }
}

.#{master-grid-name()} {
  @include flexbox-enabled-class {
    &grow {
      flex-grow: 1 !important;
    }

    &top {
      align-self: flex-start !important;
    }

    &middle {
      align-self: center !important;
    }

    &bottom {
      align-self: flex-end !important;
    }

    &base {
      align-self: baseline !important;
    }

    &stretch {
      align-self: stretch !important;
    }
  }
}

.#{$global-name-space + $row-name} {

  &-column {
    flex-flow: column wrap !important;
  }

  &-reverse {
    direction: rtl !important;
  }

  &-right {
    @include disable-if-flexbox-pure {
      text-align: right !important;
    }
    @include flexbox-enabled-class {
      justify-content: flex-end !important;
      text-align: inherit !important;
    }
  }

  &-center {
    @include disable-if-flexbox-pure {
      text-align: center !important;
    }
    @include flexbox-enabled-class {
      justify-content: center !important;
      text-align: inherit !important;
    }
  }

  &-left {
    @include disable-if-flexbox-pure {
      text-align: left !important;
    }
    @include flexbox-enabled-class {
      justify-content: flex-start !important;
      text-align: inherit !important;
    }
  }


  // ordering of items flow
  @include flexbox-enabled-class {

    &-top {
      align-items: flex-start !important;
    }

    &-middle {
      align-items: center !important;
    }

    &-bottom {
      align-items: flex-end !important;
    }

    &-base {
      align-items: baseline !important;
    }

    &-stretch {
      align-items: stretch !important;
    }

    &-between {
      justify-content: space-between !important;
    }

    &-around {
      justify-content: space-around !important;
    }
  }
}
